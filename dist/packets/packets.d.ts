export declare const packet: {
    getService: import("../lib/packet").PacketBodyHandler;
    stateService: import("../lib/packet").PacketBodyHandler;
    getTime: import("../lib/packet").PacketBodyHandler;
    setTime: import("../lib/packet").PacketBodyHandler;
    stateTime: import("../lib/packet").PacketBodyHandler;
    getResetSwitchState: import("../lib/packet").PacketBodyHandler;
    stateResetSwitch: import("../lib/packet").PacketBodyHandler;
    getDummyLoad: import("../lib/packet").PacketBodyHandler;
    setDummyLoad: import("../lib/packet").PacketBodyHandler;
    dummyLoad: import("../lib/packet").PacketBodyHandler;
    getHostInfo: import("../lib/packet").PacketBodyHandler;
    stateHostInfo: import("../lib/packet").PacketBodyHandler;
    getHostFirmware: import("../lib/packet").PacketBodyHandler;
    stateHostFirmware: import("../lib/packet").PacketBodyHandler;
    getWifiInfo: import("../lib/packet").PacketBodyHandler;
    stateWifiInfo: import("../lib/packet").PacketBodyHandler;
    getWifiFirmware: import("../lib/packet").PacketBodyHandler;
    stateWifiFirmware: import("../lib/packet").PacketBodyHandler;
    getLabel: import("../lib/packet").PacketBodyHandler;
    setLabel: import("../lib/packet").PacketBodyHandler;
    stateLabel: import("../lib/packet").PacketBodyHandler;
    getTags: import("../lib/packet").PacketBodyHandler;
    setTags: import("../lib/packet").PacketBodyHandler;
    stateTags: import("../lib/packet").PacketBodyHandler;
    getTagLabels: import("../lib/packet").PacketBodyHandler;
    setTagLabels: import("../lib/packet").PacketBodyHandler;
    stateTagLabels: import("../lib/packet").PacketBodyHandler;
    getPower: import("../lib/packet").PacketBodyHandler;
    setPower: import("../lib/packet").PacketBodyHandler;
    statePower: import("../lib/packet").PacketBodyHandler;
    getPowerLegacy: import("../lib/packet").PacketBodyHandler;
    setPowerLegacy: import("../lib/packet").PacketBodyHandler;
    statePowerLegacy: import("../lib/packet").PacketBodyHandler;
    getVersion: import("../lib/packet").PacketBodyHandler;
    stateVersion: import("../lib/packet").PacketBodyHandler;
    getInfo: import("../lib/packet").PacketBodyHandler;
    stateInfo: import("../lib/packet").PacketBodyHandler;
    getMcuRailVoltage: import("../lib/packet").PacketBodyHandler;
    stateMcuRailVoltage: import("../lib/packet").PacketBodyHandler;
    reboot: import("../lib/packet").PacketBodyHandler;
    setFactoryTestModeActive: import("../lib/packet").PacketBodyHandler;
    setFactoryTestModeInactive: import("../lib/packet").PacketBodyHandler;
    acknowledgement: import("../lib/packet").PacketBodyHandler;
    echoRequest: import("../lib/packet").PacketBodyHandler;
    echoResponse: import("../lib/packet").PacketBodyHandler;
    getLocation: import("../lib/packet").PacketBodyHandler;
    stateLocation: import("../lib/packet").PacketBodyHandler;
    getOwner: import("../lib/packet").PacketBodyHandler;
    setOwner: import("../lib/packet").PacketBodyHandler;
    stateOwner: import("../lib/packet").PacketBodyHandler;
    getGroup: import("../lib/packet").PacketBodyHandler;
    setGroup: import("../lib/packet").PacketBodyHandler;
    stateGroup: import("../lib/packet").PacketBodyHandler;
    getLight: import("../lib/packet").PacketBodyHandler;
    stateLight: import("../lib/packet").PacketBodyHandler;
    setColor: import("../lib/packet").PacketBodyHandler;
    setWaveform: import("../lib/packet").PacketBodyHandler;
    setWaveformOptional: import("../lib/packet").PacketBodyHandler;
    setDimAbsolute: import("../lib/packet").PacketBodyHandler;
    setDimRelative: import("../lib/packet").PacketBodyHandler;
    setLightColorRGBW: import("../lib/packet").PacketBodyHandler;
    getTemperature: import("../lib/packet").PacketBodyHandler;
    stateTemperature: import("../lib/packet").PacketBodyHandler;
    getInfrared: import("../lib/packet").PacketBodyHandler;
    setInfrared: import("../lib/packet").PacketBodyHandler;
    stateInfrared: import("../lib/packet").PacketBodyHandler;
    stateWanConnection: import("../lib/packet").PacketBodyHandler;
    setWanSubsActive: import("../lib/packet").PacketBodyHandler;
    seWwanSubsInactive: import("../lib/packet").PacketBodyHandler;
    stateWanSubscription: import("../lib/packet").PacketBodyHandler;
    getWifiState: import("../lib/packet").PacketBodyHandler;
    setWifiState: import("../lib/packet").PacketBodyHandler;
    stateWifiState: import("../lib/packet").PacketBodyHandler;
    getAccessPoints: import("../lib/packet").PacketBodyHandler;
    setAccessPoints: import("../lib/packet").PacketBodyHandler;
    stateAccessPoints: import("../lib/packet").PacketBodyHandler;
    getAmbientLight: import("../lib/packet").PacketBodyHandler;
    stateAmbientLight: import("../lib/packet").PacketBodyHandler;
    getDimmerVoltage: import("../lib/packet").PacketBodyHandler;
    stateDimmerVoltage: import("../lib/packet").PacketBodyHandler;
    getColorZone: import("../lib/packet").PacketBodyHandler;
    setColorZone: import("../lib/packet").PacketBodyHandler;
    stateZone: import("../lib/packet").PacketBodyHandler;
    getCountZone: import("../lib/packet").PacketBodyHandler;
    stateCountZone: import("../lib/packet").PacketBodyHandler;
    stateMultiZone: import("../lib/packet").PacketBodyHandler;
    getDeviceChain: import("../lib/packet").PacketBodyHandler;
    getTileState64: import("../lib/packet").PacketBodyHandler;
    setTileState64: import("../lib/packet").PacketBodyHandler;
    setUserPosition: import("../lib/packet").PacketBodyHandler;
    stateDeviceChain: import("../lib/packet").PacketBodyHandler;
    stateTileState64: import("../lib/packet").PacketBodyHandler;
    updateWanInfo: import("../lib/packet").PacketBodyHandler;
};
//# sourceMappingURL=packets.d.ts.map